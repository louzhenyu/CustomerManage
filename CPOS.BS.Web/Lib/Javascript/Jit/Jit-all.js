function __fnGetImg(m, type, id, value) { pObjectValue = eval(decodeURIComponent(value)); var n = parseInt(document.getElementById("__sp_" + id).innerHTML) - 1; if (type == 1) { n = n - 1 } else { n = n + 1 } if (n >= m) { n = 0 } if (n < 0) { n = m - 1 } document.getElementById("__img" + id).src = "/File/MobileDevices/Photo/" + __clientid + "/" + pObjectValue[n].ClientUserID + "/" + pObjectValue[n].FileName; document.getElementById("__sp_" + id).innerHTML = n + 1 } Ext.define("Jit.app.Controller", { extend: "Ext.app.Controller", config: { view: null, menuID: null, actions: null }, constructor: function (e) { var t = { view: null, menuID: null, actions: null }; Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, init: function (e) { Ext.applyIf(this, e.params || {}); if (this.ajaxHandlerPath == null) { Ext.Error.raise("在application中必须配置ajaxHandlerPath.") } if (this.menuID == null) { Ext.Error.raise("在application中必须配置menuID.") } }, getResource: function (e) { if (e != undefined) { for (var t = 0; t < this.languageResources.length; t++) { if (this.languageResources[t].key == e) { return this.languageResources[t].value } } return "ERROR" } }, getAjaxUrl: function (e, t) { var n = { view: e, action: t }; n = Ext.applyIf(n, { view: this.view, action: this.action }); var r = this.ajaxHandlerPath + "?"; r += "&menu=" + (this.menu == null ? "" : this.menu); r += "&view=" + (n.view == null ? "" : n.view.toString()); r += "&action=" + (n.action == null ? "" : n.action.toString()); return r } }); Ext.define("Jit.button.Button", { extend: "Ext.button.Button", alias: "widget.jitbutton", config: { jitSize: "small", jitIsHighlight: false, jitIsDefaultCSS: false }, constructor: function (e) { var t = { height: 25, margin: "0 0 0 10" }; var e = Ext.applyIf(e, { jitSize: "small", jitIsHighlight: false, jitIsDefaultCSS: false }); if (e.jitIsDefaultCSS != null && e.jitIsDefaultCSS) { if (e.text != null && e.text != "") { e.buttonText = e.text.toString() } e.padding = "0 0 0 0"; if (e.disabled != null && e.disabled) { if (e.jitSize.toString().toLowerCase() == "big") e.cls = "buttondisabled_big"; else e.cls = "buttondisabled"; e.text = '<font style="color:#000000;font-weight:bold">' + e.buttonText + "</font>" } else { if (e.jitIsHighlight) { if (e.jitSize.toString().toLowerCase() == "big") e.cls = "buttonhighlight_big"; else e.cls = "buttonhighlight"; e.text = '<font style="color:#ffffff;font-weight:bold">' + e.buttonText + "</font>" } else { if (e.jitSize.toString().toLowerCase() == "big") e.cls = "buttoncurrent_big"; else e.cls = "buttoncurrent"; e.text = '<font style="color:#484947;font-weight:bold">' + e.buttonText + "</font>" } } if (e.jitSize.toString().toLowerCase() == "big") e.disabledCls = "buttondisabled_big"; else e.disabledCls = "buttondisabled" } if (e.jitSize) { var n = e.jitSize.toString().toLowerCase(); switch (n) { case "small": { t.width = 80 } break; case "big": { t.width = 100 } break } } e.setDisabled = function (t) { if (e.jitIsDefaultCSS != null && e.jitIsDefaultCSS) { if (t) { this.setText('<font style="color:#000000;font-weight:bold">' + e.buttonText + "</font>"); this.removeCls(e.cls) } else { if (e.jitIsHighlight != null && e.jitIsHighlight) { if (e.jitSize.toString().toLowerCase() == "big") e.cls = "buttonhighlight_big"; else e.cls = "buttonhighlight"; this.setText('<font style="color:#ffffff;font-weight:bold">' + e.buttonText + "</font>") } else { if (e.jitSize.toString().toLowerCase() == "big") e.cls = "buttoncurrent_big"; else e.cls = "buttoncurrent"; this.setText('<font style="color:#484947;font-weight:bold">' + e.buttonText + "</font>") } this.addCls(e.cls) } } return this[t ? "disable" : "enable"]() }; e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) } }); Ext.define("Jit.button.CollapseButton", { extend: "Ext.button.Button", alias: "widget.JitCollapseButton", config: { expanded: false, handler: null, jitSize: "small" }, constructor: function (e) { var t = this; var n = { height: 25, margin: "0 0 0 10", border: 0, jitSize: "small" }; e = Ext.applyIf(e, n); if (e.jitSize) { var r = e.jitSize.toString().toLowerCase(); switch (r) { case "small": { e.width = 80 } break; case "big": { e.width = 100 } break } } this.initConfig(e); this.callParent(arguments); t.addListener("click", function () { if (e.readOnly == false || e.readOnly == null) { this.fnSwitchCollapse() } }); this.expanded = !this.expanded; this.fnSwitchCollapse() }, fnSwitchCollapse: function () { if (this.expanded) { this.setText("&nbsp;&nbsp;&nbsp;&nbsp;展&nbsp;&nbsp;开"); this.removeCls("arrowup"); this.addCls("arrowdown"); this.show = false; this.expanded = false } else { this.setText("&nbsp;&nbsp;&nbsp;&nbsp;收&nbsp;&nbsp;起"); this.removeCls("arrowdown"); this.addCls("arrowup"); this.show = true; this.expanded = true } } }); Ext.define("Jit.data.PagingMemoryStore", { extend: "Ext.data.Store", alias: "widget.jitPagingMemoryStore", constructor: function (e) { e = e || {}; this.callParent([e]) }, filterBy: function (e, t) { var n = this; var r = Ext.create("Ext.util.MixedCollection", false, function (e) { return e.internalId }); r.addAll(n.proxy.getReader().readRecords(n.proxy.data).records); var i = r.filterBy(e, t || n); i.sort(n.sorters.items); var s = n.pageSize; var o = i.length || 0; var u = Math.ceil(o / s); if (n.currentPage > u && n.currentPage != 1) { n.currentPage = u } var a = n.currentPage - 1; var f = a * s; var l = (a + 1) * s; var c = new Array; for (var h = f; h < i.length && h < l; h++) { c.push(i.items[h]) } var p = Ext.create("Ext.util.MixedCollection", false, function (e) { return e.internalId }); p.addAll(c); n.snapshot = n.snapshot || p; n.data = p; n.totalCount = o; n.fireEvent("datachanged", n) } }); Ext.define("Jit.form.Label", { extend: "Ext.form.Label", alias: "widget.jitlabel", config: { jitSize: null }, constructor: function (e) { var t = { labelSeparator: "", margin: "0 10 10 10", height: 22 }; var e = Ext.applyIf(e, { jitSize: "small" }); if (e.jitSize) { var n = e.jitSize.toString().toLowerCase(); switch (n) { case "small": { t.width = 183 } break; case "big": { t.width = 233 } break } } e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, jitSetValue: function (e) { this.setText(e) } }); Ext.define("Jit.form.field.Checkbox", { extend: "Ext.form.field.Checkbox", alias: "widget.jitcheckbox", constructor: function (e) { var t = { labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "0 10 10 10", width: 183, labelWidth: 73, height: 22 }; e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, jitGetValue: function () { return this.getValue() }, jitSetValue: function (e) { this.setValue(e) } }); Ext.define("Jit.form.field.ComboBox", { extend: "Ext.form.ComboBox", alias: "widget.jitcombobox", allSelector: false, jitAllText: "All", constructor: function (e) { var t = { multiSelect: false, labelSeparator: "", labelPad: 10, labelAlign: "right", queryMode: "local", margin: "0 10 10 10", editable: false, width: 183, labelWidth: 73, height: 22, matchFieldWidth: false, listConfig: { minWidth: 100, maxWidth: 300, cls: "ComboBox"} }; e = Ext.applyIf(e, t); if (e.width != null && e.width != "") { e.listConfig = { minWidth: e.width - (e.labelWidth + e.labelPad), maxWidth: 300, cls: "ComboBox"} } if (e.multiSelect) { e.addAllSelector = true } else { e.addAllSelector = false } this.initConfig(e); this.callParent(arguments) }, jitGetValue: function () { return this.getValue() }, jitSetValue: function (e) { this.setValue(e) }, createPicker: function () { var e = this, t, n = Ext.baseCSSPrefix + "menu", r = Ext.apply({ pickerField: e, selModel: { mode: e.multiSelect ? "SIMPLE" : "SINGLE" }, floating: true, hidden: true, ownerCt: e.ownerCt, cls: e.el.up("." + n) ? n : "", store: e.store, displayField: e.displayField, focusOnToFront: false, pageSize: e.pageSize, tpl: e.multiSelect ? ['<ul><tpl for=".">', '<li role="option" class="' + Ext.baseCSSPrefix + 'boundlist-item"><span class="x-combo-checker">&nbsp;</span> {' + e.displayField + "}</li>", "</tpl></ul>"] : "" }, e.listConfig, e.defaultListConfig); t = e.picker = Ext.create("Ext.view.BoundList", r); if (e.pageSize) { t.pagingToolbar.on("beforechange", e.onPageChange, e) } e.mon(t, { itemclick: e.onItemClick, refresh: e.onListRefresh, scope: e }); e.mon(t.getSelectionModel(), { beforeselect: e.onBeforeSelect, beforedeselect: e.onBeforeDeselect, selectionchange: e.onListSelectionChange, scope: e }); return t }, getSubmitValue: function () { return this.getValue() }, expand: function () { var e = this, t, n, r; if (e.rendered && !e.isExpanded && !e.isDestroyed) { t = e.bodyEl; n = e.getPicker(); r = e.collapseIf; n.show(); e.isExpanded = true; e.alignPicker(); t.addCls(e.openCls); if (e.addAllSelector == true) { if (n.getEl().getHeight() == 300) { n.getEl().setHeight(330) } } if (e.addAllSelector == true && e.allSelector == false) { e.allSelector = n.getEl().insertHtml("afterBegin", '<div class="x-boundlist-item" role="option"><span class="x-combo-checker">&nbsp;</span> ' + e.jitAllText + "</div>", true); e.allSelector.on("click", function (t) { if (e.allSelector.hasCls("x-boundlist-selected")) { e.allSelector.removeCls("x-boundlist-selected"); e.setValue(""); e.fireEvent("select", e, []) } else { var n = []; e.store.each(function (e) { n.push(e) }); e.allSelector.addCls("x-boundlist-selected"); e.select(n); e.fireEvent("select", e, n) } }) } e.mon(Ext.getDoc(), { mousewheel: r, mousedown: r, scope: e }); Ext.EventManager.onWindowResize(e.alignPicker, e); e.fireEvent("expand", e); e.onExpand() } }, onListSelectionChange: function (e, t) { var n = this; if (!n.ignoreSelection && n.isExpanded) { if (!n.multiSelect) { Ext.defer(n.collapse, 1, n) } n.setValue(t, false); if (t.length > 0) { n.fireEvent("select", n, t) } n.inputEl.focus() } if (n.addAllSelector == true && n.allSelector != false) { if (t.length == n.store.getCount()) n.allSelector.addCls("x-boundlist-selected"); else n.allSelector.removeCls("x-boundlist-selected") } } }); Ext.define("Jit.form.field.ComboTree", { extend: "Ext.form.field.Picker", alias: "widget.jitcombotree", config: { multiSelect: false, url: null, isRootVisible: false, rootText: "root", rootID: "root", isSelectLeafOnly: false, initSelectedItems: null, isAddPleaseSelectItem: false, pleaseSelectText: "--请选择--", pleaseSelectID: -2, onSelect: null, pickerCfg: { Height: 300, maxHeight: 300 }, selectedValues: new Array, initValues: new Array, hasCreatedPicker: false }, constructor: function (e) { var t = { editable: false, labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "0 10 10 10", width: 183, labelWidth: 73, height: 22, matchFieldWidth: false }; if (e.initSelectedItems != null) { if (!Ext.isArray(e.initSelectedItems)) { Ext.Error.raise("配置项initSelectedItems的值必须是一个数组,且数组内的每个元素都包含id和text属性.") } this.initValues = new Array; var n = ""; var r = true; for (var i = 0; i < e.initSelectedItems.length; i++) { var s = e.initSelectedItems[i]; if (s.id != null && s.text != null) { this.initValues.push({ id: s.id, text: s.text }); if (r) { n += s.text; r = false } else { n += "," + s.text } } } t.value = n } e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, createPicker: function () { var e = this; e.selectedValues = new Array; Ext.log("call createPicker method."); e.store = Ext.create("Ext.data.TreeStore", { proxy: { type: "ajax", url: this.url }, root: { expanded: true, text: this.rootText, id: this.rootID, checked: this.multiSelect && this.isSelectLeafOnly == false ? false : null }, listeners: { load: { fn: function (t, n, r, i, s) { Ext.log("fire load event."); if (!i) { Ext.Error.raise("获取树节点数据失败.") } else { var o = e.getPicker(); if (e.initValues != null && e.initValues.length > 0 && r != null && r.length > 0) { for (var u = 0; u < e.initValues.length; u++) { var a = e.initValues[u].id; for (var f = 0; f < r.length; f++) { var l = r[f]; if (a == l.get("id")) { e.selectedValues.push(e.initValues[u]); e.initValues.splice(u, 1); u--; if (e.multiSelect == false) { o.getSelectionModel().select(l) } } else { var c = l.findChild("id", a, true); if (c != null) { e.selectedValues.push(e.initValues[u]); e.initValues.splice(u, 1); u--; if (e.multiSelect == false) { o.getSelectionModel().select(l) } } } } } } } } }, beforeload: { fn: function (t, n, r) { Ext.log("fire beforeload event."); n.params.multiSelect = e.multiSelect; n.params.isSelectLeafOnly = e.isSelectLeafOnly; if (e.initValues != null && e.initValues.length > 0) { n.params.initValues = Ext.JSON.encode(e.initValues) } if (e.isAddPleaseSelectItem) { n.params.isAddPleaseSelectItem = e.isAddPleaseSelectItem; n.params.pleaseSelectText = e.pleaseSelectText; n.params.pleaseSelectID = e.pleaseSelectID } } }} }); var t = { width: 200, minHeight: 300, autoScroll: true, floating: true }; var n = Ext.applyIf(e.pickerCfg || {}, t); n.store = e.store; n.multiSelect = e.multiSelect; n.rootVisible = e.isRootVisible; if (e.isAddPleaseSelectItem) { n.hideHeaders = true; n.columns = [{ xtype: "jittreecolumn", text: "Name", width: Ext.isIE6 ? null : 1e4, dataIndex: "text"}] } var r = Ext.create("Ext.tree.Panel", n); if (e.isAddPleaseSelectItem) { r.addCls(Ext.baseCSSPrefix + "autowidth-table") } this.hasCreatedPicker = true; if (Ext.isIE7 || Ext.isIE8) { r.on("checkchange", function (t, n, r) { e.choice(t, false) }, this) } r.on("itemclick", function (t, n, r, i, s, o) { e.choice(n, true) }, this); return r }, getValues: function () { var e = new Array; if (this.initValues != null && this.initValues.length > 0) { e = e.concat(Ext.clone(this.initValues)) } if (this.selectedValues != null) { e = e.concat(Ext.clone(this.selectedValues)) } return e }, setValues: function (e, t) { Ext.log("call setValues method."); if (e == null) e = new Array; if (this.multiSelect == false && e.length > 1) { Ext.Error.raise("单选时不能设置多值.") } var n = new Array; for (var r = 0; r < e.length; r++) { var i = e[r]; if (i.text == null) { i.text = "" } if (i.id == null) { Ext.Error.raise("pSelectedItems数组中的每个元素都必须包含id属性.") } n.push({ id: i.id, text: i.text }) } if (this.hasCreatedPicker == false) { if (this.initValues == null) { this.initValues = new Array } if (!t) { this.initValues = n } else { if (n != null && n.length > 0) { for (var r = 0; r < n.length; r++) { var s = false; for (var o = 0; o < this.initValues.length; o++) { if (n[r].id == this.initValues[o].id) { s = true; break } } if (!s) { this.initValues.push(n[r]) } } } } } else { var u = this.getPicker(); var a = u.store; if (!t) { var f = u.getChecked(); if (f != null) { for (var r = 0; r < f.length; r++) { f[r].set("checked", false) } } this.selectedValues = new Array; this.initValues = new Array } for (var r = 0; r < n.length; r++) { var i = n[r]; var l = a.getNodeById(i.id); if (l != null) { if (this.multiSelect == true) { if (!l.get("checked")) { l.set("checked", true) } } else { u.getSelectionModel().select(l) } this.selectedValues.push({ id: l.get("id"), text: l.get("text") }) } else { this.initValues.push({ id: i.id, text: i.text }) } } } this.refreshText() }, jitGetValue: function () { var e = this.getValues(); var t = new Array; if (e != null) { for (var n = 0; n < e.length; n++) { var r = e[n]["id"]; if (r != this.pleaseSelectID) t.push(r) } } return t.join(",") }, jitGetByID: function (e) { var t = this.store; var n = null; if (t != null) { var r = t.getRootNode(); if (r != null) { var i = r.findChild("id", e, true); if (i != null) { n = { id: i.data.id, text: i.data.text} } } } return n }, jitSetValueText: function (e, t) { if (Ext.isArray(e)) { this.setValues(e, false) } else { var n = new Array; if (e != null && e != "") { var r = e.toString().split(","); var i = t.toString().split(","); for (var s = 0; s < r.length; s++) { if (r[s] != "") { n.push({ id: r[s], text: i[s] }) } } } this.setValues(n, false) } }, jitSetValue: function (e) { this.setValues(e, false) }, refreshText: function () { var e = ""; var t = true; if (this.selectedValues != null && this.selectedValues.length > 0) { for (var n = 0; n < this.selectedValues.length; n++) { if (t) { e = this.selectedValues[n].text; t = false } else { e += "," + this.selectedValues[n].text } } } if (this.initValues != null && this.initValues.length > 0) { for (var n = 0; n < this.initValues.length; n++) { if (t) { e = this.initValues[n].text; t = false } else { e += "," + this.initValues[n].text } } } this.setValue(e) }, choice: function (e, t) { var n = this.getPicker(); if (this.isSelectLeafOnly && e.get("leaf") == false) { return } var r = this.jitGetValue(); if (this.multiSelect) { if (t) { var i = e.get("checked"); if (Ext.isBoolean(i)) { i = !i; e.set("checked", i) } } var s = n.getChecked(); var o = new Array; if (s != null) { for (var u = 0; u < s.length; u++) { var a = s[u]; o.push({ id: a.get("id"), text: a.get("text") }) } } this.selectedValues = o } else { this.initValues = new Array; this.selectedValues = new Array; this.selectedValues.push({ id: e.get("id"), text: e.get("text") }); this.collapse() } this.refreshText(); if (this.onSelect != null) { if (r != this.jitGetValue()) { this.onSelect() } } } }); Ext.define("Jit.form.field.Date", { extend: "Ext.form.field.Date", alias: "widget.jitdatefield", constructor: function (e) { var t = { labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "0 10 10 10", labelWidth: 73, height: 22, width: 183, editable: false, format: "Y-m-d" }; e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, jitGetValue: function () { var e = this.getValue(); if (e != null) { return Ext.Date.format(e, "Y-m-d") } return "" }, jitSetValue: function (e) { if (e != null && e != "") { if (typeof e != "object" && e.constructor != Date) { if (e.toString().indexOf("/") > -1) { e = e.replace(/\//g, "-") } this.setValue(Ext.Date.format(Ext.Date.parse(e, "c"), "Y-m-d")) } else { this.setValue(Ext.Date.format(e, "Y-m-d")) } } else { this.setValue("") } }, jitGetValueText: function () { var e = this.getValue(); if (e != null) { return Ext.Date.format(e, "Y-m-d") } return "" } }); Ext.define("Jit.form.field.Display", { extend: "Ext.form.field.Display", alias: "widget.jitdisplayfield", config: { jitSize: null }, constructor: function (e) { var t = { labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "0 10 10 10", labelWidth: 73, cls: "Displayfield", height: 22 }; var e = Ext.applyIf(e, { jitSize: "small" }); if (e.jitSize) { var n = e.jitSize.toString().toLowerCase(); switch (n) { case "small": { t.width = 183 } break; case "big": { t.width = 233 } break } } e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, jitGetValue: function () { return this.getValue() }, jitSetValue: function (e) { this.setValue(e) } }); Ext.define("Jit.form.field.Month", { extend: "Ext.form.field.Picker", alias: "widget.jitmonthfield", triggerCls: Ext.baseCSSPrefix + "form-date-trigger", matchFieldWidth: false, valueFormatErrorMessage: "value值必须为合法的日期对象或格式正确的日期字符串.", innerDateValue: null, constructor: function (e) { var t = { labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "0 10 10 10", labelWidth: 73, height: 22, width: 183, editable: false, format: "Y-m" }; e = Ext.applyIf(e, t); if (e.value) { if (Ext.isDate(e.value)) { } else if (Ext.isString(e.value)) { var n = Ext.Date.parse(e.value, e.format); if (n != null) e.value = n; else Ext.Error.raise(this.valueFormatErrorMessage) } else { Ext.Error.raise(this.valueFormatErrorMessage) } } else { e.value = new Date } this.innerDateValue = e.value; this.initConfig(e); this.callParent(arguments) }, initComponent: function () { var e = this; e.disabledDatesRE = null; e.callParent() }, rawToValue: function (e) { return Ext.Date.parse(e, this.format) }, valueToRaw: function (e) { return Ext.Date.dateFormat(e, this.format) }, createPicker: function () { var e = this; var t = { pickerField: e, renderTo: e.renderTo, ownerCt: e.ownerCt, floating: true, shadow: false, focusOnShow: true, listeners: { scope: e, cancelclick: e.onCancelClick, okclick: e.onOKClick, yeardblclick: e.onOKClick, monthdblclick: e.onOKClick} }; var n = Ext.applyIf(e.pickerCfg || {}, t); return Ext.create("Ext.picker.Month", n) }, onExpand: function () { this.picker.setValue(this.innerDateValue) }, onOKClick: function (e, t) { var n = this, r = t[0], i = t[1], s = new Date(i, r, 1); n.setValue(s); n.innerDateValue = s; e.hide() }, onCancelClick: function () { this.picker.hide() }, jitGetValue: function () { var e = this.getValue(); if (e != null) { return Ext.Date.format(e, this.format) } return "" }, jitSetValue: function (e) { if (e) { if (Ext.isDate(e)) { this.setValue(e); this.innerDateValue = e } else if (Ext.isString(e)) { var t = Ext.Date.parse(e, this.format); if (t != null) { this.setValue(t); this.innerDateValue = t } else { Ext.Error.raise(this.valueFormatErrorMessage) } } else { Ext.Error.raise(this.valueFormatErrorMessage) } } else { this.setValue(null); this.innerDateValue = null } } }); Ext.define("Jit.form.field.Number", { extend: "Ext.form.field.Number", alias: "widget.jitnumberfield", constructor: function (e) { var t = { labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "0 10 10 10", labelWidth: 73, height: 22, width: 183, allowDecimals: false, decimalPrecision: 0, maxValue: 999999999, minValue: 0 }; if (e.allowDecimals) { t.allowDecimals = e.allowDecimals; if (e.decimalPrecision) { t.decimalPrecision = e.decimalPrecision } else { t.decimalPrecision = 2 } } e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, jitGetValue: function () { return this.getValue() }, jitSetValue: function (e) { this.setValue(e) } }); Ext.define("Jit.form.field.Radio", { extend: "Ext.form.field.Radio", alias: ["widget.jitradiofield", "widget.jitradio"], constructor: function (e) { var t = { labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "0 10 10 10", style: "font-color:#333333;font-size:12px", width: 183, labelWidth: 73, height: 22 }; e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, jitGetValue: function () { return this.getValue() }, jitSetValue: function (e) { this.setValue(e) } }); Ext.define("Jit.form.field.SelectTextBox", { extend: "Ext.panel.Panel", alias: "widget.JITSelectTextBox", config: { fieldLabel: null, Value: null, Text: null, width: null, jitSize: "small" }, constructor: function (e) { if (e.jitSize == null) e.jitSize = "small"; if (e.jitSize) { var t = e.jitSize.toString().toLowerCase(); switch (t) { case "small": { e.width = 183 } break; case "big": { e.width = 233 } break } } var n = { margin: "0 10 10 10", height: 22, layout: "column", border: 0 }; var r = this; this.addEvents({ onSelect: true }); r.selectText = Ext.create("Jit.form.field.Text", { fieldLabel: e.fieldLabel, height: 22, margin: "0 0 0 0", labelWidth: 53, labelPad: 10, labelAlign: "left", width: e.width - 17 }); r.selectBtn = Ext.create("Jit.button.Button", { margin: "0 0 0 0", height: 22, width: 17, border: 0, name: "selectBtn", cls: "selecthighlight", handler: function () { r.fireEvent("onSelect", r) } }); r.selectText.addListener("focus", function () { r.fireEvent("onSelect", r) }); n.items = [r.selectText, r.selectBtn]; e = Ext.applyIf(e, n); this.initConfig(e); this.callParent(arguments) }, jitSetText: function (e) { var t = this; t.Text = e; t.selectText.setValue(t.Text) }, jitSetValue: function (e) { var t = this; t.Value = e }, jitGetText: function () { var e = this; return e.Text }, jitGetValue: function () { var e = this; return e.Value } }); Ext.define("Jit.form.field.Text", { extend: "Ext.form.field.Text", alias: "widget.jittextfield", config: { jitSize: null }, constructor: function (e) { var t = { labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "0 10 10 10", labelWidth: 73, height: 22 }; var e = Ext.applyIf(e, { jitSize: "small" }); if (e.jitSize) { var n = e.jitSize.toString().toLowerCase(); switch (n) { case "small": { t.width = 183 } break; case "big": { t.width = 233 } break } } e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, jitGetValue: function () { return this.getValue() }, jitSetValue: function (e) { this.setValue(e) } }); Ext.define("Jit.form.field.TextArea", { extend: "Ext.form.field.TextArea", alias: "widget.jittextarea", constructor: function (e) { var t = { labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "10", width: 482, labelWidth: 72, height: 84, grow: true, matchFieldWidth: false, componentCls: "TextArea" }; e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, jitGetValue: function () { return this.getValue() }, jitSetValue: function (e) { this.setValue(e) } }); Ext.define("Jit.form.field.Time", { extend: "Ext.form.field.Time", alias: "widget.jittimefield", constructor: function (e) { var t = { labelSeparator: "", labelPad: 10, labelAlign: "right", margin: "0 10 10 10", labelWidth: 73, height: 22, width: 183, editable: false }; e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, jitGetValue: function () { return this.getValue() }, jitSetValue: function (e) { this.setValue(e) } }); Ext.define("Jit.grid.column.Column", { extend: "Ext.grid.column.Column", alias: "widget.jitcolumn", config: { jitDataType: null, jitTimespanFormatter: null }, statics: { jitYesText: "是", jitNoText: "否", jitTimespanFormatter: { dayText: "天", hourText: "小时", minuteText: "分", secondText: "秒"} }, constructor: function (e) { var t = { jitDataType: "int", sortable: true, hideable: false }; var e = Ext.applyIf(e, t); var n = e.jitDataType.toLowerCase(); switch (n) { case "int": { e.align = "right"; e.renderer = this.renderInt } break; case "decimal": { e.align = "right"; e.renderer = this.renderDecimal } break; case "boolean": { e.align = "center"; e.renderer = this.renderBoolean } break; case "string": { e.align = "left" } break; case "date": { e.align = "right"; e.renderer = this.renderDate } break; case "datetime": { e.align = "right"; e.renderer = this.renderDateTime } break; case "datetimenotss": { e.align = "right"; e.renderer = this.renderDateTimeNotSS } break; case "monthdayhourminute": { e.align = "right"; e.renderer = this.renderMonthDayHourMinute } break; case "time": { e.align = "left"; e.renderer = this.renderTime } break; case "timespan": { e.align = "left"; e.renderer = this.renderTimespan } break; case "coordinate": { e.align = "center"; var r = this; e.renderer = function (t, n, i, s, o, u, a) { return r.renderCoordinate(t, n, i, s, o, u, a, e.getMapTitle) } } break; case "photo": { e.align = "center"; e.renderer = this.renderPhoto } break; case "tips": { e.align = "left"; e.renderer = this.renderTips } break; case "percent": { e.align = "right"; e.renderer = this.renderPercent; if (!e.accuracy) { e.accuracy = 0 } } break; case "customize": break; default: Ext.Error.raise("无效的jitDataType的值:" + n + "."); break } this.initConfig(e); this.callParent(arguments) }, renderInt: function (e, t, n, r, i, s, o) { if (e == null || e == "") { return "0" } else { var u = e.toString(); var a = u.indexOf("-"); if (a > -1) { u = u.substring(1) } var f = ""; if (u.length > 3) { var l = u.length; var c = u.substring(l); var h = l % 3; var p = parseInt(l / 3); f = f + u.substring(0, h); for (var d = 0; d < p; d++) { var v = h + 3 * d; var m = h + 3 * (d + 1); var g = ","; f = f + g + u.substring(v, m) } f = f + c } else { f = u } if (h == 0) { f = f.substring(1) } if (a > -1) { f = "-" + f } return f } }, renderDecimal: function (e, t, n, r, i, s, o) { if (e == null || e == "") { return "0.00" } else { var u = parseFloat(e).toFixed(2).toString(); var a = u.indexOf("-"); if (a > -1) { u = u.substring(1) } var f = ""; if (u.length > 3) { var l = u.lastIndexOf("."); if (l < 1) { l = u.length } var c = u.substring(l); var h = l % 3; var p = parseInt(l / 3); f = f + u.substring(0, h); for (var d = 0; d < p; d++) { var v = h + 3 * d; var m = h + 3 * (d + 1); var g = ","; f = f + g + u.substring(v, m) } f = f + c } else { f = u } if (h == 0) { f = f.substring(1) } if (a > -1) { f = "-" + f } return f } }, renderBoolean: function (e, t, n, r, i, s, o) { if (e == null) return ""; else { if (e) return Jit.grid.column.Column.jitYesText; else return Jit.grid.column.Column.jitNoText } }, renderDate: function (e, t, n, r, i, s, o) { if (e == null) return ""; else { if (typeof e != "object" && e.constructor != Date) { e = Ext.Date.parse(e, "c") } return Ext.Date.format(e, "Y-m-d") } }, renderDateTime: function (e, t, n, r, i, s, o) { if (e == null) return ""; else { if (typeof e != "object" && e.constructor != Date) { e = Ext.Date.parse(e, "c") } return Ext.Date.format(e, "Y-m-d H:i:s") } }, renderDateTimeNotSS: function (e, t, n, r, i, s, o) { if (e == null) return ""; else { if (typeof e != "object" && e.constructor != Date) { e = Ext.Date.parse(e, "c") } return Ext.Date.format(e, "Y-m-d H:i") } }, renderMonthDayHourMinute: function (e, t, n, r, i, s, o) { if (e == null) return ""; else { if (typeof e != "object" && e.constructor != Date) { e = Ext.Date.parse(e, "c") } return Ext.Date.format(e, "m-d H:i") } }, renderTime: function (e, t, n, r, i, s, o) { if (e == null) return ""; else { if (typeof e != "object" && e.constructor != Date) { e = Ext.Date.parse(e, "c") } return Ext.Date.format(e, "H:i:s") } }, renderTimespan: function (e, t, n, r, i, s, o) { if (e == null) return ""; else { if (e > 3600) { return parseInt(e / 3600) + Jit.grid.column.Column.jitTimespanFormatter.hourText + parseInt((e - parseInt(e / 3600) * 3600) / 60) + Jit.grid.column.Column.jitTimespanFormatter.minuteText + (e - parseInt(e / 60) * 60) + Jit.grid.column.Column.jitTimespanFormatter.secondText } else if (e > 60) { return parseInt(e / 60) + Jit.grid.column.Column.jitTimespanFormatter.minuteText + (e - parseInt(e / 60) * 60) + Jit.grid.column.Column.jitTimespanFormatter.secondText } else { return e + Jit.grid.column.Column.jitTimespanFormatter.secondText } } }, renderCoordinate: function (e, t, n, r, i, s, o, u) { if (e != null && e != "") { try { var a = null; if (u && Ext.isFunction(u)) { a = u(e, n) } var f = e.split(","); var l = 0; var c = 0; var h = 0; if (f.length > 1) { l = f[0]; c = f[1] } if (f.length == 3) { h = f[2] } return "<img src='/Lib/Image/icon_world.gif' style='cursor:pointer' onclick='___fnMapShow(" + l + "," + c + "," + h + ',"' + a + "\")' /> " } catch (p) { return "<img src='/Lib/Image/icon_noworld.jpg' /> " } } return "<img src='/Lib/Image/icon_noworld.jpg' /> " }, renderPhoto: function (val, metaData, record, rowIndex, colIndex, store, view) { var photoValue = ""; var pClientUserID = 0; if (val != null && val != "") { try { if (val != null && val != "") { var value = eval(val); return "<img src='/Lib/Image/image.png' style='cursor:pointer' onclick='___fnPhotoShow(\"" + encodeURIComponent(Ext.encode(value)) + "\")' /> " } } catch (e) { return "<img src='/Lib/Image/noimage.png' /> " } } return "<img src='/Lib/Image/noimage.png' /> " }, renderTips: function (e, t, n, r, i, s, o) { t.tdAttr = 'data-qtip="' + e + '"'; return e }, renderPercent: function (e, t, n, r, i, s, o) { var u = ""; var a = this.headerCt.getGridColumns()[i]; if (e != null) { u = (parseFloat(e) * 100).toFixed(a.accuracy).toString() + "%" } else { u = "-" } return u } }); ___fnMapShow = function (e, t, n, r) { if (r == null || r == "" || r == "null") { r = "Map" } Ext.create("Jit.window.MapWindow", { id: "__columnMapID", title: r, jitPoint: { pointID: "0", lng: e, lat: t, isEditable: false, inGPSType: n, mapScale: 15} }); Ext.getCmp("__columnMapID").show() }; ___fnPhotoShow = function (e) { Ext.create("Jit.window.PhotoWindow", { id: "__columnPhotoID", title: "照片查看", value: e }); Ext.getCmp("__columnPhotoID").show() }; Ext.define("Jit.panel.DynamicPanel", { extend: "Ext.panel.Panel", alias: ["widget.jitdynamicpanel", "widget.jitdpanel"], config: { url: null }, constructor: function (e) { var t = { closeable: true, closeAction: "hide", modal: "true", resizable: false }; e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) } }); Ext.define("Jit.selection.CheckboxModel", { extend: "Ext.selection.CheckboxModel", alias: "widget.jitcheckboxmodel", allSelectorStatus: 0, includeList: new Array, excludeList: new Array, initChecked: new Array, defaultList: new Array, rowSelect: true, config: { idProperty: "", idSelect: "" }, constructor: function (e) { var t = {}; e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) }, onHeaderClick: function (e, t, n) { if (t.isCheckerHd) { n.stopEvent(); var r = this, i = t.el.hasCls(Ext.baseCSSPrefix + "grid-hd-checker-on"); r.preventFocus = true; if (i) { this.allSelectorStatus = 2; this.excludeList = new Array; this.initChecked = new Array; this.defaultList = new Array; Ext.Msg.show({ title: "提示", msg: "您的操作将清空所有数据", buttons: Ext.Msg.OK, icon: Ext.Msg.INFO, fn: function () { r.deselectAll() } }) } else { this.allSelectorStatus = 1; this.includeList = new Array; this.initChecked = new Array; this.defaultList = new Array; Ext.Msg.show({ title: "提示", msg: "您的操作将选择所有数据", buttons: Ext.Msg.OK, icon: Ext.Msg.INFO, fn: function () { r.selectAll() } }) } r.updateHeaderState(); delete r.preventFocus } }, onRowMouseDown: function (e, t, n, r, i) { e.el.focus(); var s = this, o = i.getTarget("." + Ext.baseCSSPrefix + "grid-row-checker"), u; var a = t.get(s.idProperty); if (s.checkOnly && o == null) { return } if (o || this.rowSelect) { if (s.allSelectorStatus == 0) { if (s.isSelected(t)) { this.includeList = this.jitDeleteArray(s.includeList, a) } else { s.includeList = this.jitAddArray(s.includeList, a) } } else if (s.allSelectorStatus == 1) { if (s.isSelected(t)) { s.excludeList = this.jitAddArray(s.excludeList, a) } else { s.excludeList = this.jitDeleteArray(s.excludeList, a) } } else if (s.allSelectorStatus == 2) { if (s.isSelected(t)) { s.includeList = this.jitDeleteArray(s.includeList, a) } else { s.includeList = this.jitAddArray(s.includeList, a) } } } if (!s.allowRightMouseSelection(i)) { return } if (s.checkOnly && !o) { return } if (o || this.rowSelect) { u = s.getSelectionMode(); if (u !== "SINGLE") { s.setSelectionMode("SIMPLE") } s.selectWithEvent(t, i); s.setSelectionMode(u) } }, onSelectChange: function () { var e = this; e.callParent(arguments); e.updateHeaderState() }, updateHeaderState: function () { var e = this.allSelectorStatus == 1; this.toggleUiHeader(e) }, jitGetValue: function () { var e = {}; e.allSelectorStatus = this.allSelectorStatus; e.includeList = this.includeList; e.excludeList = this.excludeList; e.defaultList = this.defaultList; return e }, jitClearValue: function () { this.allSelectorStatus = 0; this.includeList = new Array; this.excludeList = new Array; this.initChecked = new Array; this.defaultList = new Array }, jitSetValue: function () { var e = this; var t = e.getStore(); var n = t.data.items.length; if (this.allSelectorStatus == 0) { if (t.data != null) { if (this.initChecked.length == 0) { for (var r = 0; r < n; r++) { var i = t.data.items[r].data[this.idSelect]; if (i != null && i != "0" && i != "") { this.initChecked = this.jitAddArray(this.initChecked, t.data.items[r].data[this.idProperty]) } } var s = this.defaultList.length; if (this.defaultList.length == 0) { this.defaultList = this.initChecked.toString().split(",") } else { this.defaultList = this.jitAddArrayByArray(this.defaultList, this.initChecked.toString().split(",")) } if (s != this.defaultList.length) { if (this.includeList.length == 0) { this.includeList = this.initChecked.toString().split(",") } else { this.includeList = this.jitAddArrayByArray(this.includeList, this.initChecked.toString().split(",")) } } this.initChecked = new Array } for (var r = 0; r < n; r++) { var i = t.data.items[r].data[this.idProperty]; if (i != null && i != "0" && i != "") { if (this.includeList.length > 0) { for (var o = 0; o < this.includeList.length; o++) { if (this.includeList[o] == i) { e.select(r, true); break } } } } } } } else if (this.allSelectorStatus == 1) { e.selectAll(); for (var r = 0; r < n; r++) { var i = t.data.items[r].data[this.idProperty]; if (i != null && i != "0" && i != "") { if (this.excludeList.length > 0) { for (var o = 0; o < this.excludeList.length; o++) { if (this.excludeList[o] == i) { e.deselect(r, true); break } } } } } } else if (this.allSelectorStatus == 2) { e.deselectAll(); for (var r = 0; r < n; r++) { var i = t.data.items[r].data[this.idProperty]; if (i != null && i != "0" && i != "") { if (this.includeList.length > 0) { for (var o = 0; o < this.includeList.length; o++) { if (this.includeList[o] == i) { e.select(r, true); break } } } } } } }, jitAddArray: function (e, t) { var n = true; if (e.length > 0) { for (var r = 0; r < e.length; r++) { if (e[r] == t) { n = false; break } } } if (n) { e.push(t) } return e }, jitAddArrayByArray: function (e, t) { var n = true; if (e.length > 0) { for (var r = 0; r < t.length; r++) { n = true; for (var i = 0; i < e.length; i++) { if (t[r] == e[i]) { n = false; break } } if (n) { e.push(t[r]) } } } return e }, jitDeleteArray: function (e, t) { var n = false; var r = 0; if (e.length > 0) { for (r = 0; r < e.length; r++) { if (e[r] == t) { n = true; break } } } if (n) { e.splice(r, 1) } return e } }); Ext.define("Jit.tree.Column", { extend: "Ext.grid.column.Column", alias: "widget.jittreecolumn", tdCls: Ext.baseCSSPrefix + "grid-cell-treecolumn", initComponent: function () { var e = this.renderer || this.defaultRenderer, t = this.scope || window; this.renderer = function (n, r, i, s, o, u, a) { var f = [], l = Ext.String.format, c = i.getDepth(), h = Ext.baseCSSPrefix + "tree-", p = h + "elbow-", d = h + "expander", v = '<img src="{1}" class="{0}" />', m = '<input type="button" role="checkbox" class="{0}" {1} />', g = e.apply(t, arguments), y = i.get("href"), b = i.get("hrefTarget"), w = i.get("cls"); var E = false; if (i.get("id") == "-2") { E = true } if (E) { g = "&nbsp;" + g } while (i) { if (E == false) { if (!i.isRoot() || i.isRoot() && a.rootVisible) { if (i.getDepth() === c) { f.unshift(l(v, h + "icon " + h + "icon" + (i.get("icon") ? "-inline " : i.isLeaf() ? "-leaf " : "-parent ") + (i.get("iconCls") || ""), i.get("icon") || Ext.BLANK_IMAGE_URL)); if (i.get("checked") !== null) { f.unshift(l(m, h + "checkbox" + (i.get("checked") ? " " + h + "checkbox-checked" : ""), i.get("checked") ? 'aria-checked="true"' : "")); if (i.get("checked")) { r.tdCls += " " + h + "checked" } } if (i.isLast()) { if (i.isExpandable()) { f.unshift(l(v, p + "end-plus " + d, Ext.BLANK_IMAGE_URL)) } else { f.unshift(l(v, p + "end", Ext.BLANK_IMAGE_URL)) } } else { if (i.isExpandable()) { f.unshift(l(v, p + "plus " + d, Ext.BLANK_IMAGE_URL)) } else { f.unshift(l(v, h + "elbow", Ext.BLANK_IMAGE_URL)) } } } else { if (i.isLast() || i.getDepth() === 0) { f.unshift(l(v, p + "empty", Ext.BLANK_IMAGE_URL)) } else if (i.getDepth() !== 0) { f.unshift(l(v, p + "line", Ext.BLANK_IMAGE_URL)) } } } } i = i.parentNode } if (y) { f.push('<a href="', y, '" target="', b, '">', g, "</a>") } else { f.push(g) } if (w) { r.tdCls += " " + w } return f.join("") }; this.callParent(arguments) }, defaultRenderer: function (e) { return e } }); Ext.define("Jit.window.MapWindow", { alias: "widget.jitmapwindow", config: { jitPoint: null }, constructor: function (e) { if (e.id == null || e.id == "") { e.id = "__MapID" } var t = { jitSize: "custom", title: "Map", width: 700, height: 450, constrain: true, modal: true, resizable: true, inGPSType: 0, html: '<iframe  height="100%"  marginheight="0" marginwidth="0" scrolling="no"  frameborder="no"  id="' + e.id + 'frmFlashMap"  width="100%" src="/Lib/MapFlash/index.html?config=mapconfig.xml&MapWindowID=' + e.id + '"></iframe>' }; var n = { pointID: "0", lng: "0", lat: "0", icon: "g.png", isEditable: false, insideText: "", pointTitle: "", pointInfoHeight: "0", pointInfoWidth: "0", tips: "", pointInfo: new Array, mapScale: 0 }; e.jitPoint = Ext.applyIf(e.jitPoint || {}, n); e = Ext.applyIf(e, t); if (e.id != null && e.id != "") { if (Ext.getCmp(e.id) != null) { Ext.getCmp(e.id).destroy() } var r = Ext.create("Jit.window.Window", e); r.getFlashMapObject = function () { var t = window.frames[e.id + "frmFlashMap"]; return t }; r._map_InitMap = function () { this._map_LoadMap() }; r._map_LoadMap = function () { if (this.jitPoint.lng > 0 && this.jitPoint.lat > 0) { if (this.jitPoint.inGPSType == 1) { var e = r._map_XYGpsChange(this.jitPoint.lng, this.jitPoint.lat); this.jitPoint.lng = e.split(",")[0]; this.jitPoint.lat = e.split(",")[1] } var t = r.getFlashMapObject(); if (t != null && t.index != null) { t.index._map_RemoveStores(""); t.index._map_AddStores(r.jitGetPoint(), true); var n = 0; if (this.jitPoint.mapScale != null && this.jitPoint.mapScale > 0) { n = this.jitPoint.mapScale } if (n == 0) { n = t.index._map_GetMapScale(); if (n <= 4) { n = 15 } } if (n == 0) { t.index._map_MoveToStore(this.jitPoint.pointID) } else { t.index._map_MoveToStoreByScale(this.jitPoint.pointID, n) } } } }; r._map_OnClick = function (e, t) { if (this.jitPoint.isEditable) { this.jitPoint.lng = e; this.jitPoint.lat = t; this._map_LoadMap() } }; r._map_Update = function () { if (e.handler != null) { e.handler(this.jitPoint) } }; r.jitSetValue = function (e) { if (e != null && e != "") { var t = e.split(","); if (t.length > 1) { if (this.jitPoint.isEditable) { this.jitPoint.lng = t[0]; this.jitPoint.lat = t[1]; this._map_LoadMap() } } } else { this.jitPoint.lng = ""; this.jitPoint.lat = ""; this._map_LoadMap() } }; r.jitGetValue = function () { return this.jitPoint }; r._map_Graphic_MoveEdit = function (e) { if (this.jitPoint.isEditable) { this.jitPoint.lng = e.Lng; this.jitPoint.lat = e.Lat; this._map_LoadMap() } }; r._map_RemoveStores = function () { var e = r.getFlashMapObject(); if (e != null && e.index != null && e.index._map_RemoveStores != null) { e.index._map_RemoveStores(""); e._map_RemoveTitle(); this.jitPoint.lng = ""; this.jitPoint.lat = ""; this._map_LoadMap() } }; r._map_XYChange = function (e, t) { var n = r.getFlashMapObject(); var i = n.index._map_XYChange(e, t, 1); return i }; r._map_XYGpsChange = function (e, t) { var n = r.getFlashMapObject(); var i = n.index._map_XYChange(e, t, 3); return i }; r._map_RemoveTitle = function (e, t) { var n = r.getFlashMapObject(); n.index._map_RemoveTitle() }; r.jitGetPoint = function () { var e = new Object; e.StoreID = this.jitPoint.pointID; e.Lng = this.jitPoint.lng; e.Lat = this.jitPoint.lat; e.Icon = this.jitPoint.icon; e.IsAssigned = "true"; e.IsEdit = this.jitPoint.isEditable; e.LabelID = this.jitPoint.insideText; e.LabelContent = this.jitPoint.pointTitle; if (this.jitPoint.pointInfoHeight > 0) { e.PopInfoHeight = this.jitPoint.pointInfoHeight } if (this.jitPoint.pointInfoWidth > 0) { e.PopInfoWidth = this.jitPoint.pointInfoWidth } e.Tips = this.jitPoint.tips; if (this.jitPoint.pointInfo != null && this.jitPoint.pointInfo.toString() != "") { e.PopInfo = [this.jitPoint.pointInfo] } var t = new Array; t.push(e); var n = Ext.JSON.encode(t); return n }; return r } else { return null } } }); Ext.define("Jit.window.PhotoWindow", { alias: "widget.jitphotowindow", constructor: function (args) { var me = this; var defaultConfig = { id: "__PhotoWindowID", renderTo: null, photoTitle: "照片查看", pClientID: 0, pClientUserID: 0, pObjectValue: "" }; args = Ext.applyIf(args, defaultConfig); if (__clientid != null) { args.pClientID = __clientid } if (args.value != null && args.value != "") { me.pObjectValue = eval(decodeURIComponent(args.value)) } me.photoPanelImg = Ext.create("Ext.panel.Panel", { width: 490, height: 325, columnWidth: 1, html: "<div style='width:488px;height:295px; text-align:center;padding-top:5px'>" + "<img id='__img" + args.id + "' style='max-width:480px;max-height:280px' src='" + "/File/MobileDevices/Photo/" + args.pClientID + "/" + me.pObjectValue[0].ClientUserID + "/" + me.pObjectValue[0].FileName + "'></div><div  style='width:488px;height:20px; text-align:center;'>" + "<a href='javascript:void(0)' onclick='__fnGetImg(" + me.pObjectValue.length + ',1,"' + args.id + '","' + args.value + "\")' >上一张</a>  <span id='__sp_" + args.id + "'>1</span>/" + me.pObjectValue.length + "  <a href='javascript:void(0)' onclick='__fnGetImg(" + me.pObjectValue.length + ',2,"' + args.id + '","' + args.value + "\")'>下一张</a></div>", layout: "column", border: 0 }); if (Ext.getCmp(args.id) != null) { Ext.getCmp(args.id).destroy() } var instance = Ext.create("Jit.window.Window", { id: args.id, title: args.photoTitle, items: [me.photoPanelImg], width: 500, height: 345, jitSize: "custom", constrain: true, modal: true }) } }); Ext.define("Jit.window.Window", { extend: "Ext.window.Window", alias: "widget.jitwindow", config: { jitSize: "small" }, constructor: function (e) { var t = { closeable: true, closeAction: "hide", modal: "true", resizable: false }; var e = Ext.applyIf(e, { jitSize: "small" }); if (e.jitSize) { var n = e.jitSize.toString().toLowerCase(); switch (n) { case "small": { t.width = 300; t.height = 150 } break; case "big": { t.width = 680; t.height = 250 } break; case "large": { t.width = 900; t.height = 400 } break } } e = Ext.applyIf(e, t); this.initConfig(e); this.callParent(arguments) } })